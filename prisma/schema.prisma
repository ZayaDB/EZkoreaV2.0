// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       Profile?
  coursesOwned  Course[]  @relation("CourseInstructor")
  enrollments   Enrollment[]
}

model Profile {
  id          String    @id @default(cuid())
  bio         String?
  avatar      String?
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id          String    @id @default(cuid())
  title       String
  description String
  price       Float
  published   Boolean   @default(false)
  instructorId String
  instructor  User      @relation("CourseInstructor", fields: [instructorId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lessons     Lesson[]
  enrollments Enrollment[]
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
}

model Lesson {
  id          String    @id @default(cuid())
  title       String
  content     String
  videoUrl    String?
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  order       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  courses     Course[]
}

model Enrollment {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    Float     @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, courseId])
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}
